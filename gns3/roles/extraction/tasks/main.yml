- name: determine project path
  find:
    paths: /opt/gns3/projects/
    file_type: file
    patterns: "{{ project }}.gns3"
    recurse: yes
  register: find_output

- name: register project path
  set_fact: project_path="{{ find_output.files[0].path.split(project)[0] | lower }}"

- name: determine pcap path
  find:
    paths: "{{ project_path }}"
    file_type: file
    patterns: '*pcap'
    recurse: yes
  register: find_output

- name: create temporary extraction directory
  file:
    path: "/tmp/{{ project }}/packet-data"
    state: directory
    recurse: yes

- name: copy pcap files
  shell: "cp {{ item.path }} /tmp/{{ project }}/packet-data"
  with_items:
    - "{{ find_output.files }}"
  no_log: true

- name: determine attacks
  shell: cat "{{ project_path }}/attacks.txt"
  register: cat_output

- name: register attacks
  set_fact: attacks="{{ cat_output.stdout }}"

- name: run extraction
  docker_container:
    name: extractor
    image: sli720/extractor
    volumes:
      - "/tmp/{{ project }}/packet-data:/mnt/packet-data"
    env:
      ATTACKS: "{{ attacks }}"
    auto_remove: yes
    detach: no

- name: find simulation output
  find: 
    paths: "/tmp/{{ project }}/packet-data"
    recurse: no
    patterns: "*.pcap,*.csv"
  register: files_to_copy

- name: download simulation output
  fetch:
    src: "{{ item.path }}"
    dest: "output/{{ project }}/{{ item.path.split('/')[4] | lower }}"
    flat: yes
  with_items: "{{ files_to_copy.files }}"
  no_log: true

